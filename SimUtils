#// ----------------------------------------------------------------------------
#//! \file
#//! \brief Boolean data type
#//!
#//! $Source: STEPS_exec/modules/EthSim_UTILS.pm $
#//! $Author: AAE4KOR $
#//! $Revision: 1.0 $
#//! $Date: 07/22/2013 $
#//!
#//! User documentation: doc Folder
#// ----------------------------------------------------------------------------
#// History:
#//   added to maintain commonly needed api for Test evaluation.
#//
#// ---------------------------------------------------------------------------

package New_EthSim_UTILS;


use STEPS_general;
use STEPS_NET;
use STEPS_DNCSIM;
use STEPS_NET_Reports;
use STEPS_BSWITF_UTILS;
use ITF::ErrorHandling;


############################################################################
#needed to export the api's - Do not Modify.
use vars qw($VERSION $HEADER @ISA @EXPORT);
use Exporter;

# Add your new api's to this list below to export.
@ISA    = qw(Exporter);
@EXPORT = qw(
				rba_prepare_Eth_Header1
				rba_prepare_Ipv4_Header2
				rba_prepare_Udp_Header3
				Prepare_Frame_Fields
			);    # export subs
			
###   Global Variables for Preparing Frames
our(
 $Eth_FrameID,
 $Target_mac,
 $Source_mac,
 $Eth_VLANEnabled,
 $EthVlanId,
 $Ipv4_Len,
 $IPv4_Protocol,
 $IPv4_Srcaddr,
 $IPv4_Destaddr,
 $IPv4_TTL,
 $Udp_Srcport,
 $Udp_Destport,
 $Udp_Length,
 $Udp_payload,
 $Arp_Operation,
 $Arp_SrcMACaddr,
 $Arp_SrcIPaddr,
 $Arp_DstMACaddr,
 $Arp_DstIPaddr,
 
 
 );

		
sub Prepare_Frame_Fields
{
    $Pdu_Id=shift;
    #$Socket_Id=shift;
    
     NET_SetVariableRaw("TestCDEthSim_ReqRxPduId",$Pdu_Id);
     #NET_SetVariableRaw("TestCDEthSim_ReqSoConId",$Socket_Id);
     
     NET_CallFunction("TestCDEthSim_Proc","");
     
      NET_Wait(20);
     
     Update_Config_Hashes();
    
}

sub Update_Config_Hashes
{
    
 ### UDP header########
 our $UDP_Header=
 {
        Src_Port         => NET_GetVariableRaw(TestCDEthSim_SrcPort,""),
        Dest_Port        => NET_GetVariableRaw(TestCDEthSim_DestPort,"")
 };  
 
 ### IPv4 Header#####
 our $IPv4_Header=
 {
        Protocol         => NET_GetVariableRaw(TestCDEthSim_Protocol,""),
        Src_Address      => NET_GetVariableRaw(TestCDEthSim_SrcIpAddr,""),
        Dest_Address     => NET_GetVariableRaw(TestCDEthSim_DestIpAddr,"")
 };
 
 ### Eth_Header ####
 our $Eth_Header=
 {
        VlanEnabled      => NET_GetVariableRaw(TestCdEthSim_VLANSupEnabled,""),
        VlanId           => NET_GetVariableRaw(TestCDEthSim_VLANId,"")
 }; 
    
}			


sub rba_prepare_Eth_Header1
{
    NET_ETH_SetFrameField($Eth_FrameID,"ETH","DstMACaddr",$Target_mac);
  
    NET_ETH_SetFrameField($Eth_FrameID,"ETH","SrcMACaddr",$Source_mac);

    NET_ETH_SetFrameField($Eth_FrameID,"ETH","VLANEnabled",$Eth_Header->{'VlanEnabled'});
  
    if($Eth_VLANEnabled != 0)
  {
    NET_ETH_SetFrameField($Eth_FrameID,"ETH","VLANId", $Eth_Header->{'VlanId'});
  }
}

sub rba_prepare_Ipv4_Header2
{
   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","Version","04");
    
   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","IHL","05");

   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","TOS","00");
    
   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","ECN", "00");

   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","TotalLength", $Ipv4_Len);
    
   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","Identification", "12,35");
 
   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","Flags","00");

   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","FragmentOffset", "00,00");

   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","TTL","01");
    
   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","Protocol",$IPv4_Header->{'Protocol'});

   #NET_ETH_SetFrameField($Eth_FrameID,"IPv4","HeaderChecksum","D8,42");

   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","SourceIPAddress", $IPv4_Header->{'Src_Address'});

   NET_ETH_SetFrameField($Eth_FrameID,"IPv4","DestinationIPAddress", $IPv4_Header->{'Dest_Address'});
   
}

sub rba_prepare_Udp_Header3
{
   NET_ETH_SetFrameField($Eth_FrameID,"UDP","SourcePort", $UDP_Header->{'Src_Port'});

   NET_ETH_SetFrameField($Eth_FrameID,"UDP","DestinationPort", $UDP_Header->{'Dest_Port'});

   NET_ETH_SetFrameField($Eth_FrameID,"UDP","UDPLength", $Udp_Length);
   
   NET_ETH_SetFrameField($Eth_FrameID,"UDP","UDPPayload", $Udp_payload);
}

sub rba_prepare_Arp_Header
{
NET_ETH_SetFrameField($Eth_FrameID,"ARP","ProtocolType","08,00");

NET_ETH_SetFrameField($Eth_FrameID,"ARP","ProtocolAddLen","04");

NET_ETH_SetFrameField($Eth_FrameID,"ARP","Operation",$Arp_Operation);

NET_ETH_SetFrameField($Eth_FrameID,"ARP","SrcMACaddr",$Arp_SrcMACaddr);

NET_ETH_SetFrameField($Eth_FrameID,"ARP","SrcIPaddr",$Arp_SrcIPaddr);

NET_ETH_SetFrameField($Eth_FrameID,"ARP","DstMACaddr",$Arp_DstMACaddr);

NET_ETH_SetFrameField($Eth_FrameID,"ARP","DstIPaddr",$Arp_DstIPaddr);
    
}

push (@EXPORT, qw(
               $UDP_Header
               $IPv4_Header
               $Eth_Header
               $Udp_Length
               $Udp_payload
               $Ipv4_Len
               $Target_mac
               $Source_mac  
                  ));




